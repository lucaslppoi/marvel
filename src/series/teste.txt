  async create(name: string) {
    const data = await fetch(`https://gateway.marvel.com:443/v1/public/series?title=${name}&limit=1&${apiKey}`)
      .then(jsonValue => jsonValue.json())
      .then(data => {
        const results = data.data.results.map(async results => {
          const creators = await results.creators.items.map(creators => {
            return {
              comics: fetch(`${creators.resourceURI}?${apiKey}`)
                .then(jsonValue => jsonValue.json())
                .then(data => {
                  return data.data.results.map(results => {
                    const items = results.comics.items.map(item => {
                      console.log(item.resourceURI)
                      return {
                        resourceURI: item.resourceURI,
                        name: item.name
                      }
                    })
                    return items
                  })
                }),
              name: creators.name,
              role: creators.role
            }
          })

          return {
            id: results.id,
            title: results.title,
            creators: creators
          };
        });
        return JSON.stringify(results, null, 4);

      });

    await fs.writeFile('src/series/data/serie-data.json', data, (err) => {
      if (err) {
        console.log('erro')
      }
    });
    return data
  }



  findAll() {
    return `This action returns all series`;
  }

  findOne(id: number) {
    return `This action returns a #${id} series`;
  }

  update(id: number, updateSeriesDto: UpdateSeriesDto) {
    return `This action updates a #${id} series`;
  }

  remove(id: number) {
    return `This action removes a #${id} series`;
  }